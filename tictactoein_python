import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading


class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")

        # Game setup
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X": 0, "O": 0, "Tie": 0}
        self.symbols = {"X": "❌", "O": "⭕"}

        self.create_widgets()

    def create_widgets(self):
        """Create UI components"""
        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        # Grid buttons
        for r in range(3):
            for c in range(3):
                btn = tk.Button(
                    self.root, text=" ", width=6, height=3, font=("Arial", 24),
                    command=lambda row=r, col=c: self.player_move(row, col)
                )
                btn.grid(row=r + 1, column=c)
                self.buttons[r][c] = btn

        # Reset button
        tk.Button(self.root, text="🔄 Reset Game", command=self.reset_game).grid(
            row=4, column=0, columnspan=3, pady=10
        )

    def get_score_text(self):
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        """Handle player move"""
        if self.board[row][col] != " ":
            return

        self.board[row][col] = self.current_player
        self.buttons[row][col].config(text=self.symbols[self.current_player])
        self.play_sound("move.mp3")

        if self.check_winner(self.current_player):
            self.handle_result(self.current_player, "win.mp3")
            return
        elif self.is_tie():
            self.handle_result("Tie", "tie.mp3")
            return

        # AI turn
        self.root.after(500, self.ai_move)

    def ai_move(self):
        """Computer move using Minimax"""
        best_score, best_move = -float("inf"), None
        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player
                    score = self.minimax(False)
                    self.board[r][c] = " "
                    if score > best_score:
                        best_score, best_move = score, (r, c)

        if best_move:
            r, c = best_move
            self.board[r][c] = self.ai_player
            self.buttons[r][c].config(text=self.symbols[self.ai_player])
            self.play_sound("move.mp3")

            if self.check_winner(self.ai_player):
                self.handle_result(self.ai_player, "lose.mp3")
            elif self.is_tie():
                self.handle_result("Tie", "tie.mp3")

    def minimax(self, is_maximizing):
        """Recursive Minimax algorithm"""
        if self.check_winner(self.ai_player):
            return 1
        if self.check_winner("X"):
            return -1
        if self.is_tie():
            return 0

        scores = []
        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player if is_maximizing else "X"
                    scores.append(self.minimax(not is_maximizing))
                    self.board[r][c] = " "
        return max(scores) if is_maximizing else min(scores)

    def check_winner(self, player):
        """Check if player has won"""
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)): return True
            if all(self.board[j][i] == player for j in range(3)): return True
        if all(self.board[i][i] == player for i in range(3)): return True
        if all(self.board[i][2 - i] == player for i in range(3)): return True
        return False

    def is_tie(self):
        """Check if game ended in tie"""
        return all(self.board[r][c] != " " for r in range(3) for c in range(3))

    def handle_result(self, result, sound_file):
        """Handle win/loss/tie results"""
        if result in ["X", "O"]:
            self.scores[result] += 1
            self.highlight_winning_line(result)
        else:
            self.scores["Tie"] += 1

        self.update_scoreboard()
        self.play_sound(sound_file)
        self.root.after(1000, self.reset_board)

    def highlight_winning_line(self, player):
        """Highlight the winning row/col/diagonal"""
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)):
                return [self.animate_button(self.buttons[i][j]) for j in range(3)]
            if all(self.board[j][i] == player for j in range(3)):
                return [self.animate_button(self.buttons[j][i]) for j in range(3)]
        if all(self.board[i][i] == player for i in range(3)):
            return [self.animate_button(self.buttons[i][i]) for i in range(3)]
        if all(self.board[i][2 - i] == player for i in range(3)):
            return [self.animate_button(self.buttons[i][2 - i]) for i in range(3)]

    def animate_button(self, btn, count=0):
        """Blink winning buttons"""
        if count > 5:
            btn.config(bg="SystemButtonFace")
            return
        btn.config(bg="yellow" if count % 2 == 0 else "red")
        self.root.after(200, lambda: self.animate_button(btn, count + 1))

    def reset_board(self):
        """Clear the board"""
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ", bg="SystemButtonFace")

    def reset_game(self):
        """Reset entire game"""
        self.reset_board()
        self.scores = {"X": 0, "O": 0, "Tie": 0}
        self.update_scoreboard()

    def update_scoreboard(self):
        """Update score label"""
        self.label_score.config(text=self.get_score_text())

    def play_sound(self, filename):
        """Play sound in background"""
        threading.Thread(target=lambda: playsound(filename), daemon=True).start()


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
