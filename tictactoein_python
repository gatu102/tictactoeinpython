import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading


class TicTacToe:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")

        # Game state
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.symbols = {"X": "❌", "O": "⭕"}
        self.scores = {"X": 0, "O": 0, "Tie": 0}

        # UI elements
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.label_score = None
        self.btn_reset = None

        self.create_widgets()

    # ---------------- UI ---------------- #
    def create_widgets(self):
        """Create scoreboard, grid buttons, and reset button."""
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12))
        self.label_score.grid(row=0, column=0, columnspan=3, pady=10)

        for r in range(3):
            for c in range(3):
                self.buttons[r][c] = tk.Button(
                    self.root, text=" ", width=6, height=3, font=("Arial", 24),
                    command=lambda row=r, col=c: self.player_move(row, col)
                )
                self.buttons[r][c].grid(row=r + 1, column=c)

        self.btn_reset = tk.Button(self.root, text="🔄 Reset Game", command=self.reset_game, font=("Arial", 12))
        self.btn_reset.grid(row=4, column=0, columnspan=3, pady=10)

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())

    def get_score_text(self) -> str:
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    # ---------------- Gameplay ---------------- #
    def player_move(self, row: int, col: int):
        """Handle player (X) move."""
        if self.board[row][col] != " ":
            return

        self.make_move(row, col, "X")
        self.play_sound("move.mp3")

        if self.check_end("X"):
            return

        # AI move after short delay
        self.root.after(500, self.ai_move)

    def ai_move(self):
        """AI move using minimax."""
        best_score, best_move = -float('inf'), None

        for r in range(3):
            for c in range(3):
                if self.board[r][c] == " ":
                    self.board[r][c] = self.ai_player
                    score = self.minimax(False)
                    self.board[r][c] = " "
                    if score > best_score:
                        best_score, best_move = score, (r, c)

        if best_move:
            r, c = best_move
            self.make_move(r, c, self.ai_player)
            self.play_sound("move.mp3")
            self.check_end(self.ai_player)

    def minimax(self, is_maximizing: bool) -> int:
        """Recursive minimax algorithm for AI."""
        if self.check_winner(self.ai_player):
            return 1
        if self.check_winner("X"):
            return -1
        if self.is_tie():
            return 0

        if is_maximizing:
            return max(
                self.try_move(r, c, self.ai_player, False)
                for r in range(3) for c in range(3) if self.board[r][c] == " "
            )
        else:
            return min(
                self.try_move(r, c, "X", True)
                for r in range(3) for c in range(3) if self.board[r][c] == " "
            )

    def try_move(self, r: int, c: int, player: str, next_turn: bool) -> int:
        """Try a move for minimax and revert."""
        self.board[r][c] = player
        score = self.minimax(next_turn)
        self.board[r][c] = " "
        return score

    # ---------------- Utility ---------------- #
    def make_move(self, row: int, col: int, player: str):
        """Mark the board and update button."""
        self.board[row][col] = player
        self.buttons[row][col].config(text=self.symbols[player])

    def check_end(self, player: str) -> bool:
        """Check for win or tie after a move."""
        if self.check_winner(player):
            self.scores[player] += 1
            self.update_scoreboard()
            self.highlight_winning_line(player)
            self.play_sound("win.mp3" if player == "X" else "lose.mp3")
            self.root.after(1000, self.reset_board)
            return True
        if self.is_tie():
            self.scores["Tie"] += 1
            self.update_scoreboard()
            self.play_sound("tie.mp3")
            self.root.after(1000, self.reset_board)
            return True
        return False

    def check_winner(self, player: str) -> bool:
        """Check if a player has won."""
        lines = (
            [self.board[i] for i in range(3)] +  # rows
            [[self.board[j][i] for j in range(3)] for i in range(3)] +  # cols
            [[self.board[i][i] for i in range(3)], [self.board[i][2 - i] for i in range(3)]]  # diagonals
        )
        return any(all(cell == player for cell in line) for line in lines)

    def is_tie(self) -> bool:
        return all(self.board[r][c] != " " for r in range(3) for c in range(3))

    def highlight_winning_line(self, player: str):
        """Highlight winning row/col/diagonal with animation."""
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[i][j]); return
            if all(self.board[j][i] == player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[j][i]); return

        if all(self.board[i][i] == player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][i]); return
        if all(self.board[i][2 - i] == player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][2 - i]); return

    def animate_button(self, btn: tk.Button, count=0):
        """Blink winning buttons."""
        if count > 5:
            btn.config(bg="SystemButtonFace")
            return
        btn.config(bg="yellow" if count % 2 == 0 else "red")
        self.root.after(200, lambda: self.animate_button(btn, count + 1))

    def reset_board(self):
        """Clear board but keep scores."""
        self.board = [[" " for _ in range(3)] for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ", bg="SystemButtonFace")

    def reset_game(self):
        """Reset everything including scores."""
        self.reset_board()
        self.scores = {"X": 0, "O": 0, "Tie": 0}
        self.update_scoreboard()

    @staticmethod
    def play_sound(file: str):
        """Play sound in a separate thread."""
        threading.Thread(target=lambda: playsound(file), daemon=True).start()


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
