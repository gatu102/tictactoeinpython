import tkinter as tk
from tkinter import messagebox
from playsound import playsound
import threading
import random

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("🎮 Tic Tac Toe")
        self.root.resizable(False, False)

        # Game setup
        self.board = [[" "]*3 for _ in range(3)]
        self.buttons = [[None]*3 for _ in range(3)]
        self.current_player = "X"
        self.ai_player = "O"
        self.scores = {"X": 0, "O": 0, "Tie": 0}
        self.symbols = {"X": "❌", "O": "⭕"}

        self.create_widgets()

    # ------------------- UI CREATION -------------------
    def create_widgets(self):
        # Title label
        tk.Label(self.root, text="Tic Tac Toe", font=("Arial", 20, "bold")).grid(row=0, column=0, columnspan=3, pady=10)

        # Scoreboard
        self.label_score = tk.Label(self.root, text=self.get_score_text(), font=("Arial", 12, "bold"))
        self.label_score.grid(row=1, column=0, columnspan=3, pady=5)

        # Buttons (3x3 grid)
        for r in range(3):
            for c in range(3):
                btn = tk.Button(
                    self.root,
                    text=" ",
                    width=6,
                    height=3,
                    font=("Arial", 24, "bold"),
                    bg="#f0f0f0",
                    activebackground="#d9d9d9",
                    command=lambda row=r, col=c: self.player_move(row, col)
                )
                btn.grid(row=r+2, column=c, padx=5, pady=5)
                self.buttons[r][c] = btn

        # Reset buttons
        tk.Button(self.root, text="🔁 Reset Board", command=self.reset_board, font=("Arial", 11, "bold"), width=12, bg="#e0e0e0").grid(row=5, column=0, pady=10)
        tk.Button(self.root, text="🏆 Reset Scores", command=self.reset_game, font=("Arial", 11, "bold"), width=12, bg="#e0e0e0").grid(row=5, column=2, pady=10)

    # ------------------- GAME LOGIC -------------------
    def get_score_text(self):
        return f"Score → X: {self.scores['X']} | O: {self.scores['O']} | Ties: {self.scores['Tie']}"

    def player_move(self, row, col):
        if self.board[row][col] != " ":
            return  # prevent overwriting

        self.make_move(row, col, "X")
        if self.handle_post_move("X"):
            return

        # AI move
        self.root.after(600, self.ai_move)

    def ai_move(self):
        empty_cells = [(r, c) for r in range(3) for c in range(3) if self.board[r][c] == " "]
        if not empty_cells:
            return
        r, c = random.choice(empty_cells)
        self.make_move(r, c, "O")
        self.handle_post_move("O")

    def make_move(self, row, col, player):
        self.board[row][col] = player
        self.buttons[row][col].config(text=self.symbols[player])
        threading.Thread(target=lambda: playsound("move.mp3", block=False)).start()

    def handle_post_move(self, player):
        """Checks for win/tie after a move and handles updates."""
        if self.check_winner(player):
            self.highlight_winning_line(player)
            self.scores[player] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound("win.mp3" if player == "X" else "lose.mp3", block=False)).start()
            self.root.after(1200, self.reset_board)
            return True
        elif self.is_tie():
            self.scores["Tie"] += 1
            self.update_scoreboard()
            threading.Thread(target=lambda: playsound("tie.mp3", block=False)).start()
            self.root.after(1200, self.reset_board)
            return True
        return False

    def check_winner(self, player):
        # Check rows, columns, diagonals
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)) or all(self.board[j][i] == player for j in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2-i] == player for i in range(3)):
            return True
        return False

    def is_tie(self):
        return all(cell != " " for row in self.board for cell in row)

    # ------------------- UI UPDATES -------------------
    def highlight_winning_line(self, player):
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[i][j]); return
            if all(self.board[j][i] == player for j in range(3)):
                for j in range(3): self.animate_button(self.buttons[j][i]); return
        if all(self.board[i][i] == player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][i]); return
        if all(self.board[i][2-i] == player for i in range(3)):
            for i in range(3): self.animate_button(self.buttons[i][2-i]); return

    def animate_button(self, btn, count=0):
        if count > 6:
            btn.config(bg="#f0f0f0")
            return
        btn.config(bg="yellow" if count % 2 == 0 else "orange")
        self.root.after(180, lambda: self.animate_button(btn, count + 1))

    def reset_board(self):
        self.board = [[" "]*3 for _ in range(3)]
        for r in range(3):
            for c in range(3):
                self.buttons[r][c].config(text=" ", bg="#f0f0f0")

    def reset_game(self):
        self.reset_board()
        self.scores = {"X": 0, "O": 0, "Tie": 0}
        self.update_scoreboard()
        messagebox.showinfo("Scores Reset", "All scores have been reset!")

    def update_scoreboard(self):
        self.label_score.config(text=self.get_score_text())


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
